// code:
class Solution {
public:
//n represent the index of current house:
    int SolveUsingRec(vector<int>&nums,int n){
        if(n < 0)
        return 0;

        if(n == 0){
            return nums[0];
        }

        // include
        int includeSum = SolveUsingRec(nums,n-2) + nums[n];
        // exclude:
        int excludeSum = SolveUsingRec(nums,n-1) + 0;

        return max(includeSum,excludeSum);

    }


    int SolveUsingMem(vector<int>&nums,int n,vector<int>&dp){
        if(n < 0)
        return 0;

        if(n == 0){
            return nums[0];
        }
        if(dp[n] != -1){
            return dp[n];
        }
        // include
        int includeSum = SolveUsingMem(nums,n-2,dp) + nums[n];
        // exclude:
        int excludeSum = SolveUsingMem(nums,n-1,dp) + 0;

        dp[n] = max(includeSum,excludeSum);
        return dp[n];
    }

    int SolveUsingTab(vector<int>&nums,int n){
        vector<int>dp(n+1, 0);
        dp[0] = nums[0];
        // here dp[i] represents the maxm amount you make till ith house 
        for(int i = 1; i<= n;i++){
            int temp = 0;
            if(i-2 >= 0)
            temp = dp[i-2];

        int include = temp + nums[i];
        // exclude:
        int exclude = dp[i-1] + 0;

        dp[i] = max(include,exclude);
        }
    return dp[n];
    }


    int rob(vector<int>& nums) {
        int n = nums.size()-1;
        // int ans = SolveUsingRec(nums,n);
        // return ans;

        // Mem:
    //     vector<int>dp(n+1,-1);
    //     int ans = SolveUsingMem(nums,n,dp);
    //     return ans;

        return SolveUsingTab(nums,n);
    }
};
