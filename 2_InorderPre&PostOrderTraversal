//--> Inorder,preorder,postorder
// level Order Traversal and Height of tree(based on nodes).

#include<bits/stdc++.h>
using namespace std;

#define ll long long
class Node{
    public:
    int data;
    Node* left;
    Node* right;

    Node(int data){
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

Node* buildTree(){
    int data;
    cout<<"enter the data: "<<endl;
    cin>>data;
    if(data == -1){
        return NULL;
    }

    //step a,b and c;
    Node* root = new Node(data);

    cout<<"Enter data for left part: "<<endl;
    root->left = buildTree();

    cout<<"Enter data for right part: "<<endl;

    root->right = buildTree();

    return root;
}

void levelOrderTraversal(Node* root){
    queue<Node*>q;

    //inititally
    q.push(root);
    q.push(NULL);

    while(!q.empty()){
      
        Node* temp = q.front();
        q.pop();

        if(temp == NULL){
            //purana level complete ho chuka hai.
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
       else{
        cout<<temp->data<<" ";

       
        if(temp->left){
            q.push(temp->left);
        }
         if(temp->right){
            q.push(temp->right);
        }
       }
    }

}

void inorderTraversal(Node* root){
    // LNR;
    //base case;
    if(root == NULL){
        return;
    }
    //left part:
    inorderTraversal(root->left);
    // current node ko print kar do
    cout<<root->data<<" ";
    // right part:
    inorderTraversal(root->right);
}

void preorderTraversal(Node* root){
    //nlr
    // base case
    if(root == NULL){
        return;
    }
    cout<<root->data<<" ";
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

void postOrderTraversal(Node* root){
    //LRN
    //base case 
    if(root == NULL){
        return;
    }
    postOrderTraversal(root->left);
    postOrderTraversal(root->right);
    cout<<root->data<<" ";

}


int height(Node* root){
    if(root == NULL){
        return 0;
    }

    int leftHeight = height(root->left);
    int rightHeight = height(root->right);
    int ans = max(leftHeight,rightHeight)+1;
    return ans;
}
void buildFromLevelOrder(Node* &root){
    queue<Node*>q;
    cout<<"Enter data for root"<<endl;
    int data;cin>>data;
    root = new Node(data);
    q.push(root);

    while(!q.empty()){
        Node* temp = q.front();
        q.pop();

        cout<<"Enter left node for: "<<temp->data<<endl;
        int leftdata;
        cin>>leftdata;
        if(leftdata != -1){
            temp->left = new Node(leftdata);
            q.push(temp->left);
        }

        cout<<"Enter right node for: "<<temp->data<<endl;
        int rightdata;
        cin>>rightdata;
        if(rightdata != -1){
            temp->right = new Node(rightdata);
            q.push(temp->right);
        }
    }
}
int main()
{
    Node* root = NULL;

   /* root = buildTree();
    levelOrderTraversal(root); 
    cout<<"inorder traversal ie LNR"<<endl;
    inorderTraversal(root);
    cout<<endl;
    cout<<"preorder traversal ie NLR"<<endl;
    preorderTraversal(root);
    cout<<"\npostorder traversal ie LRN"<<endl;
    postOrderTraversal(root);
    */

    buildFromLevelOrder(root);
    levelOrderTraversal(root); 

    cout<<"height is" <<height(root)<<endl;
 return 0;
}
