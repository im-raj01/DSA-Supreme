// Tortoise Algorithm - Slow and fast Pointer

#include<bits/stdc++.h>
using namespace std;
#define ll long long

class Node{
    public:
    int data;
    Node* next;

    Node(){
        this->data = 0;
        this->next = NULL;
    }

    Node(int data){
        this->data = data;
        this->next = NULL;
    }
};

void printLL(Node* &head){
    Node* temp = head;
    while (temp!= NULL)
    {
        /* code */
        cout<<temp->data <<" ";
        temp = temp->next;
    }
    cout<<endl;
}

Node* getMiddle(Node* &head){
    
    if(head == NULL){
        cout<<"LL is empty"<<endl;
        return NULL;
    }
    if(head->next == NULL){
        //only 1 node in LL
        return head;
    }

    // ll > 1node
    Node* slow = head;
    // Node* fast = head;

    Node* fast = head->next;


    while(slow!= NULL && fast!= NULL){
        fast = fast->next;
        if(fast!= NULL){
            fast = fast->next;
            slow = slow->next;
        }
    }
    return slow;

}
int main()
{
    Node* head = new Node(10);
    Node* second = new Node(20);
    Node* third = new Node(30);
    Node* fourth = new Node(40);
    Node* fifth = new Node(50);
    Node* sixth = new Node(60);


    head->next = second;
    second->next = third;
    third->next = fourth;
    fourth->next = fifth;
    fifth->next = sixth;


    printLL(head);

    cout<<"Middle NOde of LL"<<endl;
    Node* temp = getMiddle(head);
    cout<<temp->data<<endl;




 return 0;
}
