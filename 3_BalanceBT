/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     
  //getting height
    int height(TreeNode* root){
        if(root == NULL){
            return 0;
        }
        //rec rel
        int leftHeight = height(root->left);
        int rightHeight = height(root->right);
        // iss node ka 1 height + max(lH,rH):
        int ans = 1+max(leftHeight,rightHeight);
        return ans;
    }

    bool isBalanced(TreeNode* root) {
        //base case:
        if(root == NULL){
            return true;
        }
        //1case solve:
        int leftHeight = height(root->left);
        int rightHeight = height(root->right);
        int diff = abs(leftHeight-rightHeight);

        bool rootans = (diff<=1);
        // left and right me check kar lo
        bool leftAns = isBalanced(root->left);
        bool rightAns = isBalanced(root->right);

        if(rootans && leftAns && rightAns){
            return true;
        }else{
            return false;
        }
    }
};


//2nd sol:
class Solution {
public:
    pair<bool,int>CheckBalancedFast(TreeNode* root){
        if(root == NULL){
            // T, height
            pair<int,int>p = make_pair(true,0);
            return p;
        }

        pair<bool,int>left = CheckBalancedFast(root->left);
        pair<bool,int>right = CheckBalancedFast(root->right);

        bool leftAns = left.first;
        bool rightAns = right.first;
        bool rootAns = abs(left.second - right.second) <=1;

        pair<bool,int>ans;
        ans.first = (leftAns && rightAns && rootAns);
        ans.second = max(left.second,right.second)+1;
        return ans;
    }
    bool isBalanced(TreeNode* root) {
        return CheckBalancedFast(root).first;
    }
};
